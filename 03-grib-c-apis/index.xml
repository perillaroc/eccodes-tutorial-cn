<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3. C编程接口 on ecCodes教程中文版</title>
    <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/</link>
    <description>Recent content in 3. C编程接口 on ecCodes教程中文版</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ecCodes GRIB C 接口</title>
      <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/overall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/overall/</guid>
      <description>处理 GRIB 数据的 ecCodes 函数名 ecCodes 的所有函数都以 codes_ 开头，例如
codes_handle_new_from_file(0, in, PRODUCT_GRIB, &amp;amp;err);  一些函数可以用于 GRIB 和 BUFR 两种数据，例如
// GRIB codes_get_long(h, &amp;quot;Ni&amp;quot;, &amp;amp;numberOfPointsAlongAParallel) // BUFR codes_get_long(h, &amp;quot;blockNumber&amp;quot;, &amp;amp;longVal)  另一些函数则有所不同，例如
grib_handle * codes_grib_handle_new_from_file(grib_context *c, FILE *f, int *error); grib_handle * codes_bufr_handle_new_from_file(grib_context *c, FILE *f, int *error); grib_handle * codes_handle_new_from_file(grib_context *c, FILE *f, ProductKind product, int *error);  GRIB API 中以 grib_ 开头的函数在 ecCodes 依然存在。例如
grib_handle* grib_handle_new_from_file(grib_context* c, FILE* f, int* error);  通用框架 一个使用 ecCodes 接口（Fortran/C/Python）的代码包括以下步骤</description>
    </item>
    
    <item>
      <title>加载/释放 GRIB 消息</title>
      <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/load_release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/load_release/</guid>
      <description>因为 ecCodes 仅能解码/编码加载过的 GRIB 消息，所以首先要加载消息。
有三个主要的函数用于加载一个 GRIB 消息。
 codes_handle_new_from_file (NULL, f, PRODUCT_GRIB, &amp;amp;error) 或 grib_handle_new_from_file
从已经存在并使用 fopen 已打开的文件中加载 GRIB 消息。
 codes_grib_handle_new_from_samples(NULL, &#39;regular_ll_sfc_grib2&#39;) 或 grib_handler_new_from_samples
从一个样例中加载 GRIB 消息，用于编码。后面会详细介绍。
 codes_handle_new_from_index(index, &amp;amp;error) 或 grib_handle_new_from_index
从一个 index 中加载 GRIB 消息，index 需要事先创建好。后面会详细介绍。
  上面三种加载函数将返回一个唯一的 grib handle，使用该 handle 可以操控已加载的 GRIB 消息。
无法直接访问包含已加载 GRIB 消息的缓存。缓存由 ecCodes 库内部处理。
任何 GRIB 消息占用的缓存都保存在内存中。
因此，当某个已加载的 GRIB 消息不再需要时，总应该调用 codes_handle_delete(handle) 函数释放其占用的空间。
示例：从文件中加载 GRIB 消息 #include &amp;lt;iostream&amp;gt; #include &amp;lt;eccodes.h&amp;gt; using namespace std; int main(int argc, char** argv) { if(argc &amp;lt; 2) { cout&amp;lt;&amp;lt;&amp;quot;Usage: &amp;quot;&amp;lt;&amp;lt;argv[0]&amp;lt;&amp;lt;&amp;quot; grib_file_path&amp;quot;; return 1; } const char* file_path = argv[1]; FILE* in = fopen(file_path, &amp;quot;rb&amp;quot;); if(!</description>
    </item>
    
    <item>
      <title>解码已加载的 GRIB 消息</title>
      <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/decode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/decode/</guid>
      <description>目标尽可能地少解码。永远不要解码整个已加载的 GRIB 消息。可以使用 grib_dump -D &amp;lt;grib_file&amp;gt; 查看到底有多少个 ecCodes key。
用于解码的主要函数：
int codes_get_long (codes_handle *h, const char *key, long *value); int codes_get_double (codes_handle *h, const char *key, double *value) int codes_get_string (codes_handle *h, const char *key, char *mesg, size_t *length) int codes_get_long_array (codes_handle *h, const char *key, long *vals, size_t *length) int codes_get_double_array (codes_handle *h, const char *key, double *vals, size_t *length)  帮助函数 获取一个（数组）数据的大小：
int codes_get_size(codes_handle* h, const char* key,size_t *size); int grib_get_size(grib_handle* h, const char* key,size_t *size);  详细输出 grib 消息的内容：</description>
    </item>
    
    <item>
      <title>移植</title>
      <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/migration/</guid>
      <description>从 GRIBEX 迁移到 ecCodes 译者注：没用过 GRIBEX，建议使用 ecCodes。
从 GRIB API 迁移到 ecCodes 对于 GRIB 数据，GRIB API 和 ecCodes 不同仅限于软件名称和图标。
不需要修改原有的 GRIB API 代码，仅需在连接库时连接 ecCodes 的库即可。
但可以将 grib_ 开头的函数替换成以 codes_ 开发的函数。
注意新的功能只在 ecCodes 中开发，未来将不再维护 GRIB API。</description>
    </item>
    
    <item>
      <title>编码GRIB文件</title>
      <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/encode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/encode/</guid>
      <description>编码已加载的 GRIB 消息 尽可能少进行“编码”。永远不要“编码”整个 GRIB 消息。
进行“编码”的主要函数：
int codes_set_long(codes_handle* h, const char* key, long val); int codes_set_double(codes_handle* h, const char* key, double val); int codes_set_string(codes_handle* h, const char* key , const char* mesg, size_t *length); int codes_set_double_array(codes_handle* h, const char* key, const double* vals, size_t length);  将 GRIB 消息写入文件：
int codes_write_message(codes_handle* h,const char* file,const char* mode);  注意，使用 codes_write_message 写入的 GRIB 消息会保证消息格式正确，但无法保证语义正确。
创建 GRIB 消息 可以根据样例文件创建新的 GRIB 消息。</description>
    </item>
    
    <item>
      <title>参考</title>
      <link>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://perillaroc.github.io/eccodes-tutorial-cn/03-grib-c-apis/reference/</guid>
      <description>GRIB-1, GRIB-2:
http://www.wmo.int/pages/prog/www/WMOCodes.html
ecCodes:
https://software.ecmwf.int/wiki/display/ECC/ecCodes+Home
ecCodes Fortran, C or Python 接口:
https://software.ecmwf.int/wiki/display/ECC/ecCodes+API+Reference
Examples:
https://software.ecmwf.int/wiki/display/ECC/GRIB+examples
GRIBEX: https://software.ecmwf.int/wiki/display/GRIB/GRIBEX+keys</description>
    </item>
    
  </channel>
</rss>